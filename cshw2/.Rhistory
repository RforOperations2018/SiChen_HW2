library(shiny); runApp('app_final.R')
runApp('~/GitHub/Class_2-Shiny-Concepts/Grid/app_final.R')
runApp('~/GitHub/Class_2-Shiny-Concepts/esop')
runApp('~/GitHub/Class_2-Shiny-Concepts/Sidebar/app_final.R')
runApp('~/GitHub/Class_2-Shiny-Concepts/Tabset/app_final.R')
runApp('~/GitHub/Class_2-Shiny-Concepts/Tabset/app_final.R')
runApp('~/cshw2')
setwd("C:/Users/csvan/Desktop/R shiny/cshw2")
runApp('~/cshw2')
runApp('~/cshw2')
setwd("C:/Users/csvan/Desktop/R shiny/cshw2")
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
f1ride <- select(Usertype,Tripduration)
f1ride <- select(ride$Usertype,ride$Tripduration)
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
f1ride <- select(ride$Usertype,ride$Tripduration)
head(f1ride)
f1ride <- select(ride$Usertype,ride$Tripduration)
f1ride <- select(Usertype,Tripduration)
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- as_data_frame(ride)
library(tibble)
f1ride <- ride[, c(3, 6)]
f1ride
View(f1ride)
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
View(meltf1ride)
pdf(NULL)
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp('~/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp('~/cshw2')
runApp('~/GitHub/Class_5-Updates/Navbar/app_final.R')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(tibble)
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
View(ride)
ride <- as_data_frame(ride)
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
runApp('~/cshw2')
runApp('~/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/GitHub/Class_5-Updates/Navbar/app_final.R')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
View(ride)
summary(ride)
type(ride)
summary(ride)
type(ride)
View(ride)
ride$Speed
is.numeric(ride$Speed)
is.numeric(ride$Tripduration)
runApp('~/cshw2')
runApp('C:/Users/csvan/Desktop/R shiny/hwcsR/SIC2_HW1')
runApp('C:/Users/csvan/Desktop/R shiny/hwcsR/SIC2_HW1')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
View(ride)
output$plot <- renderPlotly({
dat <- swInput()
ggplotly(
ggplot(data = dat, aes(x = Speed, y = Tripduration, color = Usertype)))})
library(shiny)
library(shiny)
library(shiny)
library(shiny)
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(shinythemes)
library(tibble)
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- as_data_frame(ride)
#sub-dataset for figure 1 (bar) different usertype's tripduration distribution
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
ui <- navbarPage("Healthy Ride in Pittsburgh",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different Usertype select
selectInput("UserSelect",
"Choose the Usertype:",
choices = sort(unique(ride$Usertype)),
multiple = TRUE,
selectize = TRUE,
selected = c("Customer", "Subscriber")),
# Trip ID Selection
sliderInput("SpeedSelect",
"Speed:",
min = min(ride$Speed, na.rm = T),
max = max(ride$Speed, na.rm = T),
value = c(min(ride$Speed, na.rm = T), max(ride$Speed, na.rm = T)),
step = 1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download Ride History Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
server <- function(input, output, session = session) {
# Filtered Ride Data
swInput <- reactive({
ride.filter <- ride %>%
# Slider Filter
filter(Speed >= input$SpeedSelect[1] & Speed <= input$SpeedSelect[2])
# Homeworld Filter
if (length(input$UsertSelect) > 0 ) {
ride.filter <- subset(ride.filter, Usertype%in% input$UserSelect)
}
return(ride.filter)
})
# Reactive melted data
mwInput <- reactive({
swInput() %>%
melt(id = "Usertype")
})
# Point plot showing Mass, Height and Species
output$plot <- renderPlotly({
dat <- swInput()
ggplotly(
ggplot(data = dat, aes(x = Speed, y = Tripduration, color = Usertype)))})
# Data Table
output$table <- DT::renderDataTable({
ride.filter <- swInput()
subset(ride.filter, select = c(Trip.id,Bikeid,Tripduration, From.station.id,To.station.id,Speed))
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("healthy-ride-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(swInput(), file)
}
)
# Reset Filter Data
observeEvent(input$reset, {
updateSelectInput(session, "UserSelect", selected = c("Customer", "Subscriber"))
updateSliderInput(session, "SpeedSelect", value = c(min(ride$Speed, na.rm = T), max(ride$Speed, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
runApp('~/cshw2')
#SiChen
#HW2
# create three (3) different kinds of figures
# one (1) data table.
# at least three (3) types of inputs
# one (1) functioning downloadButton()
# one (1) observer in the server
# On the server side your plots and tables must utilize the reactive function for any and all datasets
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(tibble)
#input and clean data
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- as_data_frame(ride)
#sub-dataset for figure 1 (bar) different usertype's tripduration distribution
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
View(ride)
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(tibble)
#input and clean data
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- as_data_frame(ride)
#sub-dataset for figure 1 (bar) different usertype's tripduration distribution
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
#sub-dataset for figure 2 (boxplot) different usertype their tripduration
#sub-dataset for figure 3 (point) from station id to station id distrubtion
ui <- navbarPage("Healthy Ride in Pittsburgh",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different speed duration select
selectInput("SpeedSlect",
"Choose the Speed Duration:",
choices = sort(unique(ride$speedlevel)),
multiple = TRUE,
selectize = TRUE,
selected=c("1-10","10-20","20-30")),
# Trip ID Selection
sliderInput("TripdurationSelect",
"Trip Duration:",
min = min(ride$Tripduration, na.rm = T),
max = max(ride$Tripduration, na.rm = T),
value = c(ride$Tripduration, na.rm = T), ride$Tripduration, na.rm = T)),
step = 1),
#Usertype select
checkboxGroupInput("UserSelect",
"User Type:",
choices = sort(unique(ride$Usertype)),
selected = c("Customer","Subscriber")),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
runApp('~/cshw2')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(tibble)
#input and clean data
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- as_data_frame(ride)
#sub-dataset for figure 1 (bar) different usertype's tripduration distribution
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
#sub-dataset for figure 2 (boxplot) different usertype their tripduration
#sub-dataset for figure 3 (point) from station id to station id distrubtion
ui <- navbarPage("Healthy Ride in Pittsburgh",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different speed duration select
selectInput("SpeedSelect",
"Choose the Speed Duration:",
choices = sort(unique(ride$speedlevel)),
multiple = TRUE,
selectize = TRUE,
selected=c("1-10","10-20","20-30")),
# Trip ID Selection
sliderInput("TripdurationSelect",
"Trip Duration:",
min = min(ride$Tripduration, na.rm = T),
max = max(ride$Tripduration, na.rm = T),
value = c(ride$Tripduration, na.rm = T), ride$Tripduration, na.rm = T)),
step = 1),
#Usertype select
checkboxGroupInput("UserSelect",
"User Type:",
choices = sort(unique(ride$Usertype)),
selected = c("Customer","Subscriber")),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
runApp('~/cshw2')
View(ride)
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
runApp('~/cshw2')
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(tibble)
ride <- read.csv('/Users/csvan/Desktop/R shiny/hwcsR/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- ride%>%
mutate(speedlevel = as.character(speedlevel),
Usertype = as.factor(Usertype))
class(ride$speedlevel)
f1ride <- ride[, c(3, 6)]
f1ride
meltf1ride <- melt(f1ride, id = "Usertype")
meltf1ride$Usertype <- as.factor(meltf1ride$Usertype)
pdf(NULL)
ui <- navbarPage("Healthy Ride in Pittsburgh",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different speed duration select
selectInput("SpeedSelect",
"Choose the Speed Duration:",
choices = sort(unique(ride$speedlevel)),
multiple = TRUE,
selectize = TRUE,
selected=c("1-10","10-20","20-30")),
# Trip Duration Selection
sliderInput("TripdurationSelect",
"Trip Duration:",
min = min(ride$Tripduration, na.rm = T),
max = max(ride$Tripduration, na.rm = T),
value = c(min(ride$Tripduration, na.rm = T), max(ride$Tripduration, na.rm = T)),
step = 1),
#Different Usertype select
checkboxGroupInput("UserSelect",
"User Type:",
choices = sort(unique(ride$Usertype)),
selected = c("Customer","Subscriber")),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Ride History Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('app - Copy.R')
runApp('app - Copy.R')
library(shiny); runApp('SiChenhw2.R')
